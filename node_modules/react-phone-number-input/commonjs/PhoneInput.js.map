{"version":3,"sources":["../source/PhoneInput.js"],"names":["PureComponent","Component","PhoneNumberInput","props","value","labels","international","metadata","country","countries","countryOptions","isCountrySupportedWithError","undefined","filterCountries","filterCountryOptions","phoneNumber","pre_selected_country","filter","_","state","country_select_options","generateCountrySelectOptions","parsed_input","generateParsedInput","onCountryChange","selectedCountry","prevProps","prevState","name","disabled","disablePhoneInput","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","getInputClassName","countrySelectAriaLabel","countrySelectProperties","error","indicateInvalid","CountrySelectComponent","countrySelectComponent","countrySelectProps","InputComponent","inputComponent","numberInputComponent","numberInputProps","ext","flags","flagComponent","flagsPath","internationalIcon","displayInitialValueAsLocalNumber","limitMaxLength","phoneNumberInputProps","hidePhoneInputField","isFocused","_countrySelectProps","key","hasOwnProperty","storeCountrySelectInstance","_onFocus","_onBlur","focus","storePhoneNumberInputInstance","onChange","onFocus","onBlur","onPhoneNumberKeyDown","invalid","cloneElement","event","parseExtDigits","hasUserSelectedACountry","old_default_country","old_value","new_default_country","new_value","new_state","parsedCountry","indexOf","propTypes","string","func","isRequired","onKeyDown","bool","arrayOf","objectOf","elementType","number","object","node","defaultProps","new_country","old_parsed_input","old_country","new_parsed_input","setState","_input","input","_event","target","stopPropagation","preventDefault","hide","number_input","country_select","CountrySelectOptionIcon","createCountrySelectOptionIconComponent","transformCountryOptions","isCountrySupported","map","label","icon","FlagComponent","InternationalIcon","options","transform","optionsOnTop","optionsOnBottom","appendTo","element","push","divider","index","option","splice","concat","console","isCountryOptionSupportedWithError","countryOption","length"],"mappings":"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","file":"PhoneInput.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\nimport { parseDigits } from 'libphonenumber-js/core'\r\n\r\n// import InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\n\r\nimport FlagComponent from './Flag'\r\n\r\nimport\r\n{\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n}\r\nfrom './PropTypes'\r\n\r\nimport\r\n{\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tmigrateParsedInputForNewCountry,\r\n\tgetCountryForPartialE164Number,\r\n\tparseInput,\r\n\te164\r\n}\r\nfrom './input-control'\r\n\r\nimport { getCountryCodes } from './countries'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n@reactLifecyclesCompat\r\nexport default class PhoneNumberInput extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t/**\r\n\t\t * Phone number in `E.164` format.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `\"+12223333333\"`\r\n\t\t */\r\n\t\tvalue : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value` as the user inputs the phone number.\r\n\t\t */\r\n\t\tonChange : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Toggles the `--focus` CSS class.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonFocus : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * `onBlur` is usually passed by `redux-form`.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonBlur : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * `onKeyDown` handler (e.g. to handle Enter key press).\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonKeyDown : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Disables both the phone number `<input/>`\r\n\t\t * and the country `<select/>`.\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\tdisabled : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t\t *\r\n\t\t * Web browser's \"autocomplete\" feature\r\n\t\t * remembers the phone number being input\r\n\t\t * and can also autofill the `<input/>`\r\n\t\t * with previously remembered phone numbers.\r\n\t\t *\r\n\t\t * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\r\n\t\t *\r\n\t\t * For example, can be used to turn it off:\r\n\t\t *\r\n\t\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t\t *  One example is when you've implemented your own version\r\n\t\t *  of autocomplete for search. Another example is any form field\r\n\t\t *  where users will input and submit different kinds of information\r\n\t\t *  where it would not be useful to have the browser remember\r\n\t\t *  what was submitted previously\".\r\n\t\t */\r\n\t\t// (is `\"tel\"` by default)\r\n\t\tautoComplete : PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `true` to show the initial `value` in\r\n\t\t * \"national\" format rather than \"international\".\r\n\t\t *\r\n\t\t * For example, if this flag is set to `true`\r\n\t\t * and the initial `value=\"+12133734253\"` is passed\r\n\t\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t\t *\r\n\t\t * By default, this flag is set to `false`,\r\n\t\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t\t *\r\n\t\t * The reason for such default behaviour is that\r\n\t\t * the newer generation grows up when there are no stationary phones\r\n\t\t * and therefore everyone inputs phone numbers in international format\r\n\t\t * in their smartphones so people gradually get more accustomed to\r\n\t\t * writing phone numbers in international format rather than in local format.\r\n\t\t * Future people won't be using \"national\" format, only \"international\".\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\tdisplayInitialValueAsLocalNumber : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The country to be selected by default.\r\n\t\t * For example, can be set after a GeoIP lookup.\r\n\t\t *\r\n\t\t * Example: `\"US\"`.\r\n\t\t */\r\n\t\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If specified, only these countries will be available for selection.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t\t */\r\n\t\tcountries : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t/**\r\n\t\t * Custom country `<select/>` option names.\r\n\t\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t\t *\r\n\t\t * See the `locales` directory for examples.\r\n\t\t */\r\n\t\tlabels : labelsPropType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The base URL path for country flag icons.\r\n\t\t * By default it loads country flag icons from\r\n\t\t * `flag-icon-css` repo github pages website.\r\n\t\t * I imagine someone might want to download\r\n\t\t * those country flag icons and host them\r\n\t\t * on their own servers instead.\r\n\t\t * Warning: in future new countries can be added\r\n\t\t * to the country select which would result in\r\n\t\t * \"Image not found\" errors when using custom `flagsPath`\r\n\t\t * due to the custom-hosted flags bundle being outdated\r\n\t\t * and missing the new flags.\r\n\t\t * So if using custom `flagsPath` always check `CHANGELOG.md`\r\n\t\t * for new country announcements before updating this library.\r\n\t\t */\r\n\t\tflagsPath : PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Custom country flag icon components.\r\n\t\t * These flags replace the default ones.\r\n\t\t *\r\n\t\t * The shape is an object where keys are country codes\r\n\t\t * and values are flag icon components.\r\n\t\t * Flag icon components receive the same properties\r\n\t\t * as `flagComponent` (see below).\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `{ \"RU\": () => <img src=\"...\"/> }`\r\n\t\t *\r\n\t\t * Can be used to replace the default flags\r\n\t\t * with custom ones for certain (or all) countries.\r\n\t\t *\r\n\t\t * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\r\n\t\t *\r\n\t\t * By default flag icons are inserted as `<img/>`s\r\n\t\t * with their `src` pointed to `flag-icon-css` repo github pages website.\r\n\t\t *\r\n\t\t * There might be some cases\r\n\t\t * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\r\n\t\t * when including the full set of `<svg/>` country flags (3 megabytes)\r\n\t\t * is more appropriate than downloading them individually at runtime only if needed.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `// Uses <svg/> flags (3 megabytes):`\r\n\t\t *\r\n\t\t * `import flags from 'react-phone-number-input/flags'`\r\n\t\t *\r\n\t\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t\t *\r\n\t\t * `<PhoneInput flags={flags} .../>`\r\n\t\t */\r\n\t\tflags : PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t\t/**\r\n\t\t * Country flag icon component.\r\n\t\t *\r\n\t\t * Takes properties:\r\n\t\t *\r\n\t\t * * country : string — The country code.\r\n\t\t * * flagsPath : string — The `flagsPath` property (see above).\r\n\t\t * * flags : object — The `flags` property (see above).\r\n\t\t */\r\n\t\tflagComponent : PropTypes.elementType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to drop the \"International\" option from country `<select/>`.\r\n\t\t */\r\n\t\tinternational : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Custom \"International\" country `<select/>` option icon.\r\n\t\t */\r\n\t\tinternationalIcon : PropTypes.elementType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to hide country `<select/>`.\r\n\t\t */\r\n\t\t// (is `true` by default)\r\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * HTML `tabindex` attribute for country `<select/>`.\r\n\t\t */\r\n\t\tcountrySelectTabIndex : PropTypes.number,\r\n\r\n\t\t/**\r\n\t\t * HTML `aria-label` attribute for country `<select/>`.\r\n\t\t * The default is `.country` of the `labels` property\r\n\t\t * which is `\"Country\"` for the default `labels`.\r\n\t\t */\r\n\t\tcountrySelectAriaLabel : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t\t *\r\n\t\t * * `\"|\"` — inserts a separator.\r\n\t\t * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t\t */\r\n\t\tcountryOptions : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t/**\r\n\t\t * `<Phone/>` component CSS style object.\r\n\t\t */\r\n\t\tstyle : PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * `<Phone/>` component CSS class.\r\n\t\t */\r\n\t\tclassName : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` CSS class.\r\n\t\t */\r\n\t\tinputClassName : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Returns phone number `<input/>` CSS class string.\r\n\t\t * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tgetInputClassName : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Country `<select/>` component.\r\n\t\t *\r\n\t\t * Receives properties:\r\n\t\t *\r\n\t\t * * `name : string?` — HTML `name` attribute.\r\n\t\t * * `value : string?` — The currently selected country code.\r\n\t\t * * `onChange(value : string?)` — Updates the `value`.\r\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\r\n\t\t * * `disabled : boolean?` — HTML `disabled` attribute.\r\n\t\t * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\r\n\t\t * * `className : string` — CSS class name.\r\n\t\t */\r\n\t\t//\r\n\t\t// (deprecated)\r\n\t\t// * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\r\n\t\t// * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\r\n\t\t//\r\n\t\tcountrySelectComponent : PropTypes.elementType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Country `<select/>` component props.\r\n\t\t */\r\n\t\tcountrySelectProps: PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component.\r\n\t\t *\r\n\t\t * Receives properties:\r\n\t\t *\r\n\t\t * * `value: string` — The formatted `value`.\r\n\t\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `onBlur(event: Event)` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t\t *\r\n\t\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t\t */\r\n\t\tnumberInputComponent : PropTypes.elementType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component props.\r\n\t\t */\r\n\t\tnumberInputProps: PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component (a higher-order one).\r\n\t\t *\r\n\t\t * Receives properties:\r\n\t\t *\r\n\t\t * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t * * `onChange(value? : string)` — Updates the `value`.\r\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\r\n\t\t * * `metadata : object` — `libphonenumber-js` metadata.\r\n\t\t * * `inputComponent : elementType` — Phone number `<input/>` component. This is basically the `numberInputComponent` property renamed to `inputComponent`.\r\n\t\t * * All other properties should be passed through to the underlying `<input/>`.\r\n\t\t *\r\n\t\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t\t *\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tinputComponent : PropTypes.elementType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use `inputComponent={InputBasic}`\r\n\t\t * instead of `input-format`'s `<ReactInput/>`.\r\n\t\t */\r\n\t\t// Is `false` by default.\r\n\t\t// smartCaret : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Phone number extension `<input/>` element.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t *\t`ext={<input value={...} onChange={...}/>}`\r\n\t\t */\r\n\t\text : PropTypes.node,\r\n\r\n\t\t/**\r\n\t\t * If set to `true` the phone number input will get trimmed\r\n\t\t * if it exceeds the maximum length for the country.\r\n\t\t */\r\n\t\tlimitMaxLength : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\r\n\t\t */\r\n\t\terror : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The `error` is shown only when `indicateInvalid` is `true`.\r\n\t\t * (which is the default).\r\n\t\t * @deprecated\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tindicateInvalid : PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t *\r\n\t\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t\t */\r\n\t\tmetadata : metadataPropType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Is called every time the selected country changes:\r\n\t\t * either programmatically or when user selects it manually from the list.\r\n\t\t */\r\n\t\t// People have been asking for a way to get the selected country.\r\n\t\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t\t// For some it's just a \"business requirement\".\r\n\t\t// I guess it's about gathering as much info on the user as a website can\r\n\t\t// without introducing any addional fields that would complicate the form\r\n\t\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t\t// Assuming that the phone number's country is the user's country\r\n\t\t// is not 100% correct but in most cases I guess it's valid.\r\n\t\tonCountryChange : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Disables only the phone number `<input/>`.\r\n\t\t *\r\n\t\t * Some users choose to implement a digital keyboard component for phone number input.\r\n\t\t * In such cases the phone number input field must be disabled in order for the default system keyboard to not show up on focus.\r\n\t\t * At the same time, country select should not be disabled in order for the user to be able to choose their country.\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/215\r\n\t\tdisablePhoneInput : PropTypes.bool.isRequired\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t/**\r\n\t\t * Not disabled.\r\n\t\t */\r\n\t\tdisabled: false,\r\n\t\tdisablePhoneInput: false,\r\n\r\n\t\t/**\r\n\t\t * Show `error` (if passed).\r\n\t\t * @deprecated\r\n\t\t */\r\n\t\tindicateInvalid : true,\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Flag icon component.\r\n\t\t */\r\n\t\tflagComponent: FlagComponent,\r\n\r\n\t\t/**\r\n\t\t * By default, use icons from `flag-icon-css` github repo.\r\n\t\t */\r\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\r\n\r\n\t\t/**\r\n\t\t * Default \"International\" country `<select/>` option icon (globe).\r\n\t\t */\r\n\t\t // internationalIcon: InternationalIcon,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component.\r\n\t\t */\r\n\t\tnumberInputComponent: 'input',\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component (a higher-order one).\r\n\t\t */\r\n\t\tinputComponent: InputBasic,\r\n\r\n\t\t/**\r\n\t\t * Show country `<select/>`.\r\n\t\t */\r\n\t\tshowCountrySelect: true,\r\n\r\n\t\t/**\r\n\t\t * Don't convert the initially passed phone number `value`\r\n\t\t * to a national phone number for its country.\r\n\t\t * The reason is that the newer generation grows up when\r\n\t\t * there are no stationary phones and therefore everyone inputs\r\n\t\t * phone numbers with a `+` in their smartphones\r\n\t\t * so phone numbers written in international form\r\n\t\t * are gradually being considered more natural than local ones.\r\n\t\t */\r\n\t\tdisplayInitialValueAsLocalNumber: false,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use `inputComponent={InputBasic}`\r\n\t\t * instead of `input-format`'s `<ReactInput/>`.\r\n\t\t * Is `false` by default.\r\n\t\t */\r\n\t\t// smartCaret : false,\r\n\r\n\t\t/**\r\n\t\t * Whether to add the \"International\" option\r\n\t\t * to the list of countries.\r\n\t\t */\r\n\t\tinternational : true,\r\n\r\n\t\t/**\r\n\t\t * If set to `true` the phone number input will get trimmed\r\n\t\t * if it exceeds the maximum length for the country.\r\n\t\t */\r\n\t\tlimitMaxLength : false\r\n\t}\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `country`.\r\n\t\tif (country) {\r\n\t\t\tif (!this.isCountrySupportedWithError(country)) {\r\n\t\t\t\tcountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = filterCountries(countries, metadata)\r\n\r\n\t\t// Validate `countryOptions`.\r\n\t\tcountryOptions = filterCountryOptions(countryOptions, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tconst pre_selected_country = getPreSelectedCountry(\r\n\t\t\tphoneNumber,\r\n\t\t\tcountry,\r\n\t\t\tcountries || getCountryCodes(labels).filter(_ => _ === 'ZZ' || metadata.countries[_]),\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t)\r\n\r\n\t\tthis.state =\r\n\t\t{\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops : this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry : pre_selected_country,\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// Generate country `<select/>` options.\r\n\t\t\tcountry_select_options : generateCountrySelectOptions(countries, countryOptions, this.props),\r\n\r\n\t\t\t// `parsed_input` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `parsed_input` is `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `parsed_input` is `+78005553535`.\r\n\t\t\tparsed_input : generateParsedInput(value, phoneNumber, this.props),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `parsed_input` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `parsed_input` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { country } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (!country || !this.isCountrySupportedWithError(country)) {\r\n\t\t\t\tcountry = undefined\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== country) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && this.state.country !== prevState.country) {\r\n\t\t\tonCountryChange(this.state.country)\r\n\t\t}\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (new_country) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tmetadata,\r\n\t\t\tonChange\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparsed_input : old_parsed_input,\r\n\t\t\tcountry      : old_country\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst new_parsed_input = migrateParsedInputForNewCountry\r\n\t\t(\r\n\t\t\told_parsed_input,\r\n\t\t\told_country,\r\n\t\t\tnew_country,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert to \"local\" phone number format.\r\n\t\t\ttrue\r\n\t\t)\r\n\r\n\t\tconst new_value = e164(new_parsed_input, new_country, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tthis.focus()\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the default `country` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tcountry : new_country,\r\n\t\t\thasUserSelectedACountry : true,\r\n\t\t\tparsed_input : new_parsed_input,\r\n\t\t\tvalue : new_value\r\n\t\t},\r\n\t\t() =>\r\n\t\t{\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(new_value)\r\n\t\t})\r\n\t}\r\n\r\n\t// Phone number `<input/>` `onKeyDown` handler.\r\n\tonPhoneNumberKeyDown = (event) =>\r\n\t{\r\n\t\tconst { onKeyDown } = this.props\r\n\r\n\t\t// Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\r\n\t\t// (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\r\n\t\t// so can't hijack \"Down arrow\" keypress here.\r\n\t\t// // Expand country `<select/>`` on \"Down arrow\" key press.\r\n\t\t// if (event.keyCode === 40) {\r\n\t\t// \tthis.country_select.toggle()\r\n\t\t// }\r\n\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_input) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tonChange,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tinput,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t}\r\n\t\t= parseInput\r\n\t\t(\r\n\t\t\t_input,\r\n\t\t\tthis.state.parsed_input,\r\n\t\t\tthis.state.country,\r\n\t\t\tthis.state.countries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata\r\n\t\t)\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tparsed_input: input,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t},\r\n\t\t// Update the new `value` property.\r\n\t\t// Doing it after the `state` has been updated\r\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t() => onChange(value))\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tconst { onFocus } = this.props\r\n\t\tthis._onFocus()\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\t// This `onBlur` interceptor is a workaround for `redux-form`\r\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\r\n\t// Without this fix it just gets the actual (raw) input field textual value.\r\n\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\r\n\t//\r\n\t// A developer is not supposed to pass this `onBlur` property manually.\r\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\r\n\t// and this component patches that `onBlur` handler (a hacky way but works).\r\n\t//\r\n\tonBlur = (event) =>\r\n\t{\r\n\t\tconst { onBlur } = this.props\r\n\t\tconst { value } = this.state\r\n\r\n\t\tthis._onBlur()\r\n\r\n\t\tif (!onBlur) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// `event` is React's `SyntheticEvent`.\r\n\t\t// Its `.value` is read-only therefore cloning it.\r\n\t\tconst _event = {\r\n\t\t\t...event,\r\n\t\t\ttarget: {\r\n\t\t\t\t...event.target,\r\n\t\t\t\tvalue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// For `redux-form` event detection.\r\n\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\r\n\t\t_event.stopPropagation = event.stopPropagation\r\n\t\t_event.preventDefault  = event.preventDefault\r\n\r\n\t\treturn onBlur(_event)\r\n\t}\r\n\r\n\t// When country `<select/>` is toggled.\r\n\thidePhoneInputField = (hide) => {\r\n\t\tthis.setState({\r\n\t\t\thidePhoneInputField: hide\r\n\t\t})\r\n\t}\r\n\r\n\t// Can be called externally.\r\n\tfocus = () => this.number_input.focus()\r\n\r\n\tstoreCountrySelectInstance = _ => this.country_select = _\r\n\r\n\tstorePhoneNumberInputInstance = _ => this.number_input = _\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\thasUserSelectedACountry,\r\n\t\t\tvalue,\r\n\t\t\tprops: {\r\n\t\t\t\tcountry : old_default_country,\r\n\t\t\t\tvalue   : old_value\r\n\t\t\t}\r\n\t\t} = state\r\n\r\n\t\tconst {\r\n\t\t\tmetadata,\r\n\t\t\tcountries,\r\n\t\t\tcountry : new_default_country,\r\n\t\t\tvalue   : new_value\r\n\t\t} = props\r\n\r\n\t\tconst new_state = {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t// If the user has already manually selected a country\r\n\t\t\t// then don't override that already selected country\r\n\t\t\t// if the default `country` property changes.\r\n\t\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\t\thasUserSelectedACountry\r\n\t\t}\r\n\r\n\t\t// If `countries` or `labels` or `international` changed\r\n\t\t// then re-generate country `<select/>` options.\r\n\t\tif (props.countries !== state.props.countries ||\r\n\t\t\tprops.labels !== state.props.labels ||\r\n\t\t\tprops.international !== state.props.international) {\r\n\t\t\t// Re-generate country select options.\r\n\t\t\tnew_state.country_select_options = generateCountrySelectOptions(\r\n\t\t\t\tfilterCountries(props.countries, metadata),\r\n\t\t\t\tfilterCountryOptions(props.countryOptions, metadata),\r\n\t\t\t\tprops\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\t// If the default country changed.\r\n\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t\t// then select it but only if the user hasn't already manually\r\n\t\t// selected a country and no phone number has been entered so far.\r\n\t\t// Because if the user has already started inputting a phone number\r\n\t\t// then he's okay with no country being selected at all (\"International\")\r\n\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\r\n\t\tif (new_default_country !== old_default_country &&\r\n\t\t\t!hasUserSelectedACountry && !value && !new_value) {\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tcountry: isCountrySupportedWithError(new_default_country, metadata) ? new_default_country : old_default_country\r\n\t\t\t\t// `value` is `undefined`.\r\n\t\t\t\t// `parsed_input` is `undefined` because `value` is `undefined`.\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If a new `value` is set externally.\r\n\t\t// (e.g. as a result of an ajax API request\r\n\t\t//  to get user's phone after page loaded)\r\n\t\t// The first part — `new_value !== old_value` —\r\n\t\t// is basically `props.value !== prevProps.value`\r\n\t\t// so it means \"if value property was changed externally\".\r\n\t\t// The second part — `new_value !== value` —\r\n\t\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t\t// then the country flag would reset on each input.\r\n\t\telse if (new_value !== old_value && new_value !== value) {\r\n\t\t\tconst phoneNumber = parsePhoneNumber(new_value, metadata)\r\n\t\t\tlet parsedCountry\r\n\t\t\tif (phoneNumber) {\r\n\t\t\t\tconst countries = filterCountries(props.countries, metadata)\r\n\t\t\t\tif (!countries || countries.indexOf(phoneNumber.country) >= 0) {\r\n\t\t\t\t\tparsedCountry = phoneNumber.country\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tparsed_input : generateParsedInput(new_value, phoneNumber, props),\r\n\t\t\t\tvalue : new_value,\r\n\t\t\t\tcountry : new_value ? parsedCountry : country\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// `country` didn't change.\r\n\t\t// `value` didn't change.\r\n\t\t// `parsed_input` didn't change, because `value` didn't change.\r\n\t\t//\r\n\t\t// Maybe `new_state.country_select_options` changed.\r\n\t\t// In any case, update `prevProps`.\r\n\t\treturn new_state\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\tdisablePhoneInput,\r\n\t\t\tautoComplete,\r\n\t\t\tcountrySelectTabIndex,\r\n\t\t\tshowCountrySelect,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\t\t\tinputClassName,\r\n\t\t\tgetInputClassName,\r\n\t\t\tcountrySelectAriaLabel,\r\n\t\t\tcountrySelectProperties,\r\n\r\n\t\t\terror,\r\n\t\t\tindicateInvalid,\r\n\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\t\t\tinputComponent: InputComponent,\r\n\t\t\tnumberInputComponent: inputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\t// smartCaret,\r\n\t\t\text,\r\n\r\n\t\t\t// Extract `phoneNumberInputProps` via \"object rest spread\":\r\n\t\t\tcountry : _,\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagsPath,\r\n\t\t\tinternational,\r\n\t\t\tinternationalIcon,\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata,\r\n\t\t\t...phoneNumberInputProps\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tcountry,\r\n\t\t\thidePhoneInputField,\r\n\t\t\tcountry_select_options,\r\n\t\t\tparsed_input,\r\n\t\t\tisFocused\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// const InputComponent = InputComponent || (smartCaret ? InputSmart : InputBasic)\r\n\r\n\t\t// Extract `countrySelectProperties` from `this.props`\r\n\t\t// also removing them from `phoneNumberInputProps`.\r\n\t\tconst _countrySelectProps = {}\r\n\t\tif (countrySelectProperties)\r\n\t\t{\r\n\t\t\tfor (const key in countrySelectProperties)\r\n\t\t\t{\r\n\t\t\t\tif (this.props.hasOwnProperty(key))\r\n\t\t\t\t{\r\n\t\t\t\t\t_countrySelectProps[countrySelectProperties[key]] = this.props[key]\r\n\t\t\t\t\tdelete phoneNumberInputProps[key]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Could use something like `aria-label={labels.phone}` on the `<InputComponent/>`,\r\n\t\t// however, some users may have already been using this component with one of:\r\n\t\t// * `<label/>` container\r\n\t\t// * `aria-labelledby`\r\n\t\t// * `id` and `<label for/>`\r\n\t\t// https://developers.google.com/web/fundamentals/accessibility/semantics-aria/aria-labels-and-relationships\r\n\t\t// Maybe in some future major version update.\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames('react-phone-number-input',\r\n\t\t\t\t{\r\n\t\t\t\t\t'react-phone-number-input--focus'   : isFocused,\r\n\t\t\t\t\t'react-phone-number-input--invalid' : error && indicateInvalid\r\n\t\t\t\t},\r\n\t\t\t\tclassName) }>\r\n\r\n\t\t\t\t{/* Country `<select/>` and phone number `<input/>` */}\r\n\t\t\t\t<div className=\"react-phone-number-input__row\">\r\n\r\n\t\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t\t{ showCountrySelect &&\r\n\t\t\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\t\t\t{..._countrySelectProps}\r\n\t\t\t\t\t\t\tref={ this.storeCountrySelectInstance }\r\n\t\t\t\t\t\t\tname={ name ? `${name}__country` : undefined }\r\n\t\t\t\t\t\t\taria-label={ countrySelectAriaLabel || labels.country }\r\n\t\t\t\t\t\t\ttabIndex={ countrySelectTabIndex }\r\n\t\t\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\t\t\tvalue={ country }\r\n\t\t\t\t\t\t\toptions={ country_select_options }\r\n\t\t\t\t\t\t\tonChange={ this.onCountryChange }\r\n\t\t\t\t\t\t\tonFocus={ this._onFocus }\r\n\t\t\t\t\t\t\tonBlur={ this._onBlur }\r\n\t\t\t\t\t\t\tdisabled={ disabled }\r\n\t\t\t\t\t\t\thidePhoneInputField={ this.hidePhoneInputField }\r\n\t\t\t\t\t\t\tfocusPhoneInputField={ this.focus }\r\n\t\t\t\t\t\t\tclassName=\"react-phone-number-input__country\"/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t\t{ !hidePhoneInputField &&\r\n\t\t\t\t\t\t<InputComponent\r\n\t\t\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\t\t\tautoComplete={ autoComplete }\r\n\t\t\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t\t\t{...phoneNumberInputProps}\r\n\t\t\t\t\t\t\tref={ this.storePhoneNumberInputInstance }\r\n\t\t\t\t\t\t\tname={ name }\r\n\t\t\t\t\t\t\tmetadata={ metadata }\r\n\t\t\t\t\t\t\tcountry={ country }\r\n\t\t\t\t\t\t\tvalue={ parsed_input || '' }\r\n\t\t\t\t\t\t\tonChange={ this.onChange }\r\n\t\t\t\t\t\t\tonFocus={ this.onFocus }\r\n\t\t\t\t\t\t\tonBlur={ this.onBlur }\r\n\t\t\t\t\t\t\tonKeyDown={ this.onPhoneNumberKeyDown }\r\n\t\t\t\t\t\t\tdisabled={ disabled || disablePhoneInput }\r\n\t\t\t\t\t\t\tinputComponent={ inputComponent }\r\n\t\t\t\t\t\t\tclassName={ classNames\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t'react-phone-number-input__input',\r\n\t\t\t\t\t\t\t\t'react-phone-number-input__phone',\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled || disablePhoneInput,\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--invalid'  : error && indicateInvalid\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({\r\n\t\t\t\t\t\t\t\t\tdisabled: disabled || disablePhoneInput,\r\n\t\t\t\t\t\t\t\t\tinvalid: error && indicateInvalid\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t) }/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* Phone extension `<input/>` */}\r\n\t\t\t\t\t{ ext && !hidePhoneInputField &&\r\n\t\t\t\t\t\t<label className=\"react-phone-number-input__ext\">\r\n\t\t\t\t\t\t\t{labels.ext}\r\n\t\t\t\t\t\t\t{React.cloneElement(ext,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tonChange : ext.props.onChange ? (event) => ext.props.onChange(parseExtDigits(event)) : undefined,\r\n\t\t\t\t\t\t\t\tonFocus : this._onFocus,\r\n\t\t\t\t\t\t\t\tonBlur : this._onBlur,\r\n\t\t\t\t\t\t\t\tclassName : classNames\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input',\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__ext-input',\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled || disablePhoneInput,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({\r\n\t\t\t\t\t\t\t\t\t\tdisabled: disabled || disablePhoneInput\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\text.props.className\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Error message */}\r\n\t\t\t\t{ error && indicateInvalid &&\r\n\t\t\t\t\t<div className=\"react-phone-number-input__error\">\r\n\t\t\t\t\t\t{ error }\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// Generates country `<select/>` options.\r\nfunction generateCountrySelectOptions(countries, countryOptions, props) {\r\n\tconst {\r\n\t\tlabels,\r\n\t\tinternational,\r\n\t\tmetadata\r\n\t} = props\r\n\r\n\tconst CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props)\r\n\r\n\treturn transformCountryOptions(\r\n\t\tgetCountrySelectOptions(\r\n\t\t\tcountries || getCountryCodes(labels).filter(country => country === 'ZZ' || isCountrySupported(country, metadata)),\r\n\t\t\tlabels,\r\n\t\t\tinternational\r\n\t\t).map(({ value, label }) => ({\r\n\t\t\tvalue,\r\n\t\t\tlabel,\r\n\t\t\ticon: CountrySelectOptionIcon\r\n\t\t})),\r\n\t\tcountryOptions\r\n\t)\r\n}\r\n\r\nfunction createCountrySelectOptionIconComponent(props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tflags,\r\n\t\tflagsPath,\r\n\t\tflagComponent : FlagComponent,\r\n\t\tinternationalIcon : InternationalIcon\r\n\t}\r\n\t= props\r\n\r\n\treturn ({ value }) => (\r\n\t\t<div\r\n\t\t\tclassName={classNames('react-phone-number-input__icon',\r\n\t\t\t{\r\n\t\t\t\t'react-phone-number-input__icon--international': value === undefined\r\n\t\t\t})}>\r\n\t\t\t{\r\n\t\t\t\tvalue\r\n\t\t\t\t?\r\n\t\t\t\t<FlagComponent\r\n\t\t\t\t\tcountry={value}\r\n\t\t\t\t\tflags={flags}\r\n\t\t\t\t\tflagsPath={flagsPath}/>\r\n\t\t\t\t:\r\n\t\t\t\t<InternationalIcon/>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n// Can move some country `<select/>` options\r\n// to the top of the list, for example.\r\n// See `countryOptions` property.\r\nfunction transformCountryOptions(options, transform)\r\n{\r\n\tif (!transform) {\r\n\t\treturn options\r\n\t}\r\n\r\n\tconst optionsOnTop = []\r\n\tconst optionsOnBottom = []\r\n\tlet appendTo = optionsOnTop\r\n\r\n\tfor (const element of transform)\r\n\t{\r\n\t\tif (element === '|')\r\n\t\t{\r\n\t\t\tappendTo.push({ divider: true })\r\n\t\t}\r\n\t\telse if (element === '...' || element === '…')\r\n\t\t{\r\n\t\t\tappendTo = optionsOnBottom\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Find the position of the option.\r\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === element)[0])\r\n\t\t\t// Get the option.\r\n\t\t\tconst option = options[index]\r\n\t\t\t// Remove the option from its default position.\r\n\t\t\toptions.splice(index, 1)\r\n\t\t\t// Add the option on top.\r\n\t\t\tappendTo.push(option)\r\n\t\t}\r\n\t}\r\n\r\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\r\n}\r\n\r\nfunction generateParsedInput(value, phoneNumber, props)\r\n{\r\n\tconst { displayInitialValueAsLocalNumber } = props\r\n\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `displayInitialValueAsLocalNumber` property is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\r\n\t\treturn generateNationalNumberDigits(phoneNumber)\r\n\t}\r\n\r\n\treturn value\r\n}\r\n\r\nfunction isCountrySupported(country, metadata) {\r\n\treturn metadata.countries.hasOwnProperty(country)\r\n}\r\n\r\nfunction isCountrySupportedWithError(country, metadata) {\r\n\tif (isCountrySupported(country, metadata)) {\r\n\t\treturn true\r\n\t} else {\r\n\t\tconsole.error(`Country not found: ${country}`)\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nfunction isCountryOptionSupportedWithError(countryOption, metadata) {\r\n\tswitch (countryOption) {\r\n\t\tcase '|':\r\n\t\tcase '...':\r\n\t\tcase '…':\r\n\t\t\treturn true\r\n\t\tdefault:\r\n\t\t\treturn isCountrySupportedWithError(countryOption, metadata)\r\n\t}\r\n}\r\n\r\nfunction filterCountries(countries, metadata) {\r\n\tif (countries) {\r\n\t\tcountries = countries.filter(country => isCountrySupportedWithError(country, metadata))\r\n\t\tif (countries.length === 0) {\r\n\t\t\tcountries = undefined\r\n\t\t}\r\n\t}\r\n\treturn countries\r\n}\r\n\r\nfunction filterCountryOptions(countryOptions, metadata) {\r\n\tif (countryOptions) {\r\n\t\tcountryOptions = countryOptions.filter(countryOption => isCountryOptionSupportedWithError(countryOption, metadata))\r\n\t\tif (countryOptions.length === 0) {\r\n\t\t\tcountryOptions = undefined\r\n\t\t}\r\n\t}\r\n\treturn countryOptions\r\n}\r\n\r\nfunction parseExtDigits(event) {\r\n\tif (event) {\r\n\t\tif (typeof event === 'string') {\r\n\t\t\tevent = parseDigits(event)\r\n\t\t} else if (event.target && event.target.value) {\r\n\t\t\tevent.target.value = parseDigits(event.target.value)\r\n\t\t}\r\n\t}\r\n\treturn event\r\n}"]}
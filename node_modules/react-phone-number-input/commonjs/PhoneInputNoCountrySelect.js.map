{"version":3,"sources":["../source/PhoneInputNoCountrySelect.js"],"names":["createInput","defaultMetadata","PhoneInput","ref","country","value","onChange","metadata","rest","prevCountry","setPrevCountry","getParsedInputForValue","parsedInput","setParsedInput","valueForParsedInput","setValueForParsedInput","onParsedInputChange","slice","asYouType","input","phoneNumber","getNumber","number","forwardRef","propTypes","type","string","autoComplete","func","isRequired","inputComponent","elementType","object","defaultProps","console","error","formatNational"],"mappings":"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","file":"PhoneInputNoCountrySelect.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { AsYouType } from 'libphonenumber-js/core'\r\n\r\nimport InputBasic from './InputBasic'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\tfunction PhoneInput({\r\n\t\tcountry,\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tmetadata,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\t\tconst [parsedInput, setParsedInput] = useState(getParsedInputForValue(value, country, metadata))\r\n\t\tconst [valueForParsedInput, setValueForParsedInput] = useState(value)\r\n\t\t// If `value` property has been changed externally\r\n\t\t// then re-initialize the component.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (value !== valueForParsedInput) {\r\n\t\t\t\tsetParsedInput(getParsedInputForValue(value, country, metadata))\r\n\t\t\t\tsetValueForParsedInput(value)\r\n\t\t\t}\r\n\t\t}, [value])\r\n\t\t// If the `country` has been changed then re-initialize the component.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (country !== prevCountry) {\r\n\t\t\t\tsetPrevCountry(country)\r\n\t\t\t\tsetParsedInput(getParsedInputForValue(value, country, metadata))\r\n\t\t\t}\r\n\t\t}, [country])\r\n\t\t// Call `onChange` after the new `valueForParsedInput` has been applied.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (valueForParsedInput !== value) {\r\n\t\t\t\tonChange(valueForParsedInput)\r\n\t\t\t}\r\n\t\t}, [valueForParsedInput])\r\n\t\tconst onParsedInputChange = useCallback((parsedInput) => {\r\n\t\t\tlet value\r\n\t\t\tif (country) {\r\n\t\t\t\t// Won't allow `+` in the beginning\r\n\t\t\t\t// when a `country` has been specified.\r\n\t\t\t\tif (parsedInput && parsedInput[0] === '+') {\r\n\t\t\t\t\tparsedInput = parsedInput.slice(1)\r\n\t\t\t\t}\r\n\t\t\t\t// Convert `parsedInput` to `value`.\r\n\t\t\t\tif (parsedInput) {\r\n\t\t\t\t\tconst asYouType = new AsYouType(country, metadata)\r\n\t\t\t\t\tasYouType.input(parsedInput)\r\n\t\t\t\t\tconst phoneNumber = asYouType.getNumber()\r\n\t\t\t\t\tif (phoneNumber) {\r\n\t\t\t\t\t\tvalue = phoneNumber.number\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t\t// when no `country` has been specified.\r\n\t\t\t\tif (parsedInput && parsedInput[0] !== '+') {\r\n\t\t\t\t\tparsedInput = '+' + parsedInput\r\n\t\t\t\t}\r\n\t\t\t\t// Convert `parsedInput` to `value`.\r\n\t\t\t\tif (parsedInput) {\r\n\t\t\t\t\tvalue = parsedInput\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsetParsedInput(parsedInput)\r\n\t\t\tsetValueForParsedInput(value)\r\n\t\t}, [country, metadata, setParsedInput, setValueForParsedInput])\r\n\t\treturn (\r\n\t\t\t<InputBasic\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tmetadata={metadata}\r\n\t\t\t\tcountry={country}\r\n\t\t\t\tvalue={parsedInput}\r\n\t\t\t\tonChange={onParsedInputChange} />\r\n\t\t)\r\n\t}\r\n\r\n\tPhoneInput = React.forwardRef(PhoneInput)\r\n\r\n\tPhoneInput.propTypes = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type` attribute.\r\n\t\t */\r\n\t\ttype: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * HTML `<input/>` `autocomplete` attribute.\r\n\t\t */\r\n\t\tautoComplete: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * Examples: \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (for example, `+7 800 555 35 35`)\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * Examples: `undefined`, `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value`.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tPhoneInput.defaultProps = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type=\"tel\"`.\r\n\t\t */\r\n\t\ttype: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn PhoneInput\r\n}\r\n\r\nexport default createInput()\r\n\r\nfunction getParsedInputForValue(value, country, metadata) {\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tif (!country) {\r\n\t\treturn value\r\n\t}\r\n\tconst asYouType = new AsYouType(country, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\tif (phoneNumber) {\r\n\t\t// Even if the actual country of the `value` being passed\r\n\t\t// doesn't match the `country` property,\r\n\t\t// still format the national number.\r\n\t\t// This is some kind of an \"error recovery\" procedure.\r\n\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\tconsole.error(`[react-phone-number-input] Phone number ${value} corresponds to country ${phoneNumber.country} but ${country} was specified instead.`)\r\n\t\t}\r\n\t\treturn phoneNumber.formatNational()\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}"]}